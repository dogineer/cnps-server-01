<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.develop.web.domain.users.auth.mapper.AuthMapper">
    <select id="selectMemberAccount" resultType="String" parameterType="String">
        SELECT account
        FROM emp
        WHERE account = #{account}
    </select>

    <select id="selectEmpCount" resultType="int">
        SELECT COUNT(*)
        FROM emp
    </select>

    <select id="selectMember" resultType="Member" parameterType="String">
        SELECT id,
               dept_id    AS deptId,
               rank_id    AS rankId,
               program_id AS programId,
               account,
               name,
               birth,
               gender,
               phone,
               email,
               des,
               joined_at,
               approved_at,
               access,
               del_fl,
               password
        FROM emp
        WHERE account = #{account}
    </select>

    <select id="selectMemberGetList" resultType="MemberInfo">
        SELECT account,
               e.name as name,
               r.name as rankName,
               d.name as deptName,
               t.name as programName,
               birth,
               gender,
               email,
               access,
               joined_at,
               approved_at,
               del_fl    WH
        FROM emp e
                 JOIN `dept` d on d.id = e.dept_id
                 JOIN `rank` r on r.id = e.rank_id
                 JOIN `program` t on t.id = e.program_id
        WHERE del_fl = false
        ORDER BY joined_at DESC
            LIMIT ${limit}
        OFFSET ${offset}
    </select>

    <select id="selectMemberDeleteGetList" resultType="MemberInfo">
        SELECT account,
               e.name as name,
               r.name as rankName,
               d.name as deptName,
               t.name as programName,
               birth,
               gender,
               email,
               access,
               joined_at,
               approved_at,
               del_fl    WH
        FROM emp e
                 JOIN `dept` d on d.id = e.dept_id
                 JOIN `rank` r on r.id = e.rank_id
                 JOIN `program` t on t.id = e.program_id
        WHERE del_fl = true
        ORDER BY joined_at DESC
            LIMIT ${limit}
        OFFSET ${offset}
    </select>

    <select id="selectMemberInfoList" resultType="MemberInfo">
        SELECT account,
               e.name as name,
               r.name as rankName,
               d.name as deptName,
               t.name as programName,
               birth,
               gender,
               email,
               access,
               joined_at,
               approved_at,
               del_fl
        FROM emp e
                 JOIN `dept` d on d.id = e.dept_id
                 JOIN `rank` r on r.id = e.rank_id
                 JOIN `program` t on t.id = e.program_id
        WHERE del_fl = false
    </select>

    <select id="selectMemberInfo" resultType="MemberInfo" parameterType="String">
        WITH RECURSIVE C AS (SELECT e.account, d.id, d.p_id, d.name, CONCAT_WS(' > ', d3.name, d2.name, d.name) AS path
                             FROM dept d
                                      INNER JOIN emp e ON d.id = e.dept_id
                                      LEFT JOIN dept d2 ON d.p_id = d2.id
                                      LEFT JOIN dept d3 ON d2.p_id = d3.id)
        SELECT e.account,
               e.id,
               e.name as name,
               r.id   as rankId,
               r.name as rankName,
               d.id   as deptId,
               C.path as deptName,
               t.id   as programId,
               t.name as programName,
               e.birth,
               e.gender,
               e.email,
               e.phone,
               e.des,
               e.access,
               e.del_fl,
               e.joined_at,
               e.approved_at
        FROM emp e
                 JOIN `dept` d on d.id = e.dept_id
                 JOIN `rank` r on r.id = e.rank_id
                 JOIN `program` t on t.id = e.program_id
                 JOIN C ON e.account = C.account
        WHERE e.account = #{account}
    </select>

    <select id="selectJoinedMember" resultType="AuthMember" parameterType="String">
        SELECT account,
               r.name as role,
               access,
               password
        FROM emp e
                 JOIN `rank` r ON e.rank_id = r.id
        WHERE account = #{account}
    </select>
</mapper>