<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.develop.web.domain.member.user.mapper.UserMapper">
    <select id="selectUserAccount" resultType="String" parameterType="String">
        SELECT account
        FROM user
        WHERE account = #{account}
    </select>

    <select id="selectUserCount" resultType="int">
        SELECT COUNT(*)
        FROM user
    </select>

    <select id="selectUser" resultType="UserDto" parameterType="String">
        SELECT id,
               dept_id    AS deptId,
               pos_id     AS posId,
               program_id AS programId,
               account,
               name,
               birth,
               gender,
               phone,
               email,
               des,
               joined_at,
               approved_at,
               role,
               del_fl,
               password
        FROM user
        WHERE account = #{account}
    </select>

    <select id="selectMemberGetList" resultType="Userinfo">
        SELECT account,
               e.name   as name,
               pos.name as posName,
               d.name   as deptName,
               t.name   as programName,
               birth,
               gender,
               email,
               role,
               joined_at,
               approved_at,
               del_fl      WH
        FROM user e
                 JOIN `dept` d on d.id = e.dept_id
                 JOIN `position` pos on pos.id = e.pos_id
                 JOIN `program` t on t.id = e.program_id
        WHERE del_fl = false
        ORDER BY joined_at DESC
            LIMIT ${limit}
        OFFSET ${offset}
    </select>

    <select id="selectMemberDeleteGetList" resultType="Userinfo">
        SELECT account,
               e.name   as name,
               pos.name as posName,
               d.name   as deptName,
               t.name   as programName,
               birth,
               gender,
               email,
               role,
               joined_at,
               approved_at,
               del_fl      WH
        FROM user e
                 JOIN `dept` d on d.id = e.dept_id
                 JOIN `position` pos on pos.id = e.pos_id
                 JOIN `program` t on t.id = e.program_id
        WHERE del_fl = true
        ORDER BY joined_at DESC
            LIMIT ${limit}
        OFFSET ${offset}
    </select>

    <select id="selectMemberInfoList" resultType="Userinfo">
        SELECT account,
               e.name   as name,
               pos.name as posName,
               d.name   as deptName,
               t.name   as programName,
               birth,
               gender,
               email,
               role,
               joined_at,
               approved_at,
               del_fl
        FROM user e
                 JOIN `dept` d on d.id = e.dept_id
                 JOIN `position` pos on pos.id = e.pos_id
                 JOIN `program` t on t.id = e.program_id
        WHERE del_fl = false
    </select>

    <select id="selectUserinfo" resultType="Userinfo" parameterType="String">
        WITH RECURSIVE C AS (SELECT e.account, d.id, d.p_id, d.name, CONCAT_WS(' > ', d3.name, d2.name, d.name) AS path
                             FROM dept d
                                      INNER JOIN user e ON d.id = e.dept_id
                                      LEFT JOIN dept d2 ON d.p_id = d2.id
                                      LEFT JOIN dept d3 ON d2.p_id = d3.id)
        SELECT e.account,
               e.id,
               e.name   as name,
               pos.id   as posId,
               pos.name as posName,
               d.id     as deptId,
               C.path   as deptName,
               t.id     as programId,
               t.name   as programName,
               e.birth,
               e.gender,
               e.email,
               e.phone,
               e.des,
               e.role,
               e.del_fl,
               e.joined_at,
               e.approved_at
        FROM user e
                 JOIN `dept` d on d.id = e.dept_id
                 JOIN `position` pos on pos.id = e.pos_id
                 JOIN `program` t on t.id = e.program_id
                 JOIN C ON e.account = C.account
        WHERE e.account = #{account}
    </select>

    <select id="selectJoinedMember" resultType="UserAuthDto" parameterType="String">
        SELECT account,
               p.name as pos,
               role,
               password
        FROM user e
                 JOIN `position` p ON e.pos_id = p.id
        WHERE account = #{account}
    </select>
</mapper>